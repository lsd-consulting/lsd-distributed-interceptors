sourceSets {
    springIntegrationHttpTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/springIntegrationHttpTest/java')
        }
    }
}

configurations {
    springIntegrationHttpTestImplementation.extendsFrom implementation
}

dependencies {

    // Spring
    springIntegrationHttpTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    springIntegrationHttpTestImplementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    springIntegrationHttpTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    springIntegrationHttpTestImplementation 'org.springframework.kafka:spring-kafka'
    springIntegrationHttpTestImplementation 'org.springframework.kafka:spring-kafka-test'

    // Other
    springIntegrationHttpTestImplementation 'org.awaitility:awaitility:4.3.0'
    springIntegrationHttpTestImplementation 'com.github.tomakehurst:wiremock-jre8:2.35.2'
    springIntegrationHttpTestImplementation 'org.jeasy:easy-random-core:5.0.0'

    // LSD
    springIntegrationHttpTestImplementation 'io.github.lsd-consulting:lsd-distributed-http-connector:3.0.1'
    springIntegrationHttpTestImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-service:6.1.5:wiremock-stubs'){
        exclude group: "*", module: "*"
    }

    springIntegrationHttpTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.20.1'
}

tasks.register('springIntegrationHttpTest', Test) {
    useJUnitPlatform()
    dependsOn assemble

    testClassesDirs = sourceSets.springIntegrationHttpTest.output.classesDirs
    classpath = sourceSets.springIntegrationHttpTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = false
    mustRunAfter(integrationHttpTest)
    finalizedBy jacocoTestReport
}

check.dependsOn(springIntegrationHttpTest)

springIntegrationHttpTest {
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Http integration test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
