import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.3.5' apply false
    id 'io.spring.dependency-management' version '1.1.6'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'com.palantir.git-version' version '3.1.0'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '2.0.21'
    id 'org.jetbrains.dokka' version "1.9.20"
}

group = 'io.github.lsd-consulting'
version = gitVersion().replaceAll("^v", "")
println "Build Version = ${version}"

kotlin {
    jvmToolchain(17)
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    group = rootProject.getGroup()
    version = rootProject.getVersion()

    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
            mavenBom 'io.pivotal.spring.cloud:spring-cloud-services-dependencies:4.1.6'
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    plugins.withId('maven-publish') {
        bootJar {
            enabled = false
        }

        jar {
            enabled = true
            archiveClassifier.set("")
        }

        tasks.register('sourcesJar', Jar) {
            dependsOn classes
            archiveClassifier.set("sources")
            from sourceSets.main.allSource
        }

        tasks.register('javadocJar', Jar) {
            dependsOn(dokkaJavadoc)
            archiveClassifier.set("javadoc")
            from dokkaHtml.outputDirectory
        }

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = "$group"
                    artifactId = "${rootProject.name}-${project.name}"
                    version = "$version"

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    pom {
                        name = "${rootProject.name}-${project.name}"
                        description = "A set of ${project.name} interceptors gathering information from distributed sources for the LSD library."
                        url = 'https://github.com/lsd-consulting/lsd-distributed-interceptors'
                        licenses {
                            license {
                                name = "The Apache Software License, Version 2.0"
                                url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                                distribution = "repo"
                            }
                        }
                        developers {
                            developer {
                                name = "Lukasz"
                                email = "lukasz.gryzbon@gmail.com"
                                organization = 'Integreety Ltd.'
                                organizationUrl = 'https://www.integreety.co.uk'
                            }
                            developer {
                                name = "Nick"
                                email = "nicholas.mcdowall@gmail.com"
                                organization = 'NKM IT Solutions'
                                organizationUrl = 'https://github.com/nickmcdowall'
                            }
                        }
                        scm {
                            url = "https://github.com/lsd-consulting/lsd-distributed-interceptors.git"
                        }
                    }
                    repositories {
                        maven {
                            name = 'sonatype'
                            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                            credentials(PasswordCredentials)
                        }
                    }
                }
            }
        }
    }

    plugins.withId('signing') {
        signing {
            if (project.findProperty("signingKey")) {
                // Use in-memory ascii-armored keys
                def signingKey = findProperty("signingKey")
                def signingPassword = findProperty("signingPassword")
                useInMemoryPgpKeys(signingKey as String, signingPassword as String)
                sign publishing.publications.mavenJava
            } else {
                // Use signing properties in ~/.gradle/gradle.properties
                sign publishing.publications.mavenJava
            }
        }
    }
}

apply from: 'hooks.gradle'

nexusPublishing {
    repositories {
        sonatype {  //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}
