sourceSets {
    integrationHttpTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationHttpTest/java')
        }
    }
}

configurations {
    integrationHttpTestImplementation.extendsFrom implementation
}

dependencies {

    // Spring
    integrationHttpTestImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    integrationHttpTestImplementation 'org.springframework.boot:spring-boot-starter-test'
    integrationHttpTestImplementation 'org.springframework.boot:spring-boot-starter-web'
    integrationHttpTestImplementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    integrationHttpTestImplementation 'io.micrometer:micrometer-tracing'
    integrationHttpTestImplementation 'io.micrometer:micrometer-tracing-bridge-otel'
    integrationHttpTestImplementation 'io.zipkin.brave:brave:5.18.1'

    // Other
    integrationHttpTestImplementation 'com.github.fridujo:rabbitmq-mock:1.1.1'
    integrationHttpTestImplementation 'org.awaitility:awaitility:4.1.0'
    integrationHttpTestImplementation 'org.wiremock:wiremock-standalone:3.3.1'
    integrationHttpTestImplementation 'org.jeasy:easy-random-core:5.0.0'

    // LSD
    integrationHttpTestImplementation 'io.github.lsd-consulting:lsd-distributed-http-connector:4.0.0'
    integrationHttpTestImplementation 'io.github.lsd-consulting:lsd-junit5:6.0.0'
    integrationHttpTestImplementation 'io.github.lsd-consulting:lsd-distributed-generator:8.0.0'
    integrationHttpTestImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-api:7.0.0')
    integrationHttpTestImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-service:7.0.0:wiremock-stubs'){
        exclude group: "*", module: "*"
    }

    integrationHttpTestImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1'
}

tasks.register('integrationHttpTest', Test) {
    useJUnitPlatform()
    dependsOn assemble

    testClassesDirs = sourceSets.integrationHttpTest.output.classesDirs
    classpath = sourceSets.integrationHttpTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = false
    mustRunAfter(test)
    finalizedBy jacocoTestReport
}

check.dependsOn(integrationHttpTest)

integrationHttpTest {
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Http integration test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
