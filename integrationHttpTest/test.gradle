dependencies {
    testImplementation project(":core")
    testImplementation project(":feign")
    testImplementation project(":spring-web")
    testImplementation project(":rabbitmq")

    // Spring
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    testImplementation 'io.micrometer:micrometer-tracing'
    testImplementation 'io.micrometer:micrometer-tracing-bridge-otel'

    // Other
    testImplementation 'com.github.fridujo:rabbitmq-mock:1.1.1'
    testImplementation 'org.awaitility:awaitility:4.1.0'
    testImplementation 'org.wiremock:wiremock-standalone:3.3.1'
    testImplementation 'org.jeasy:easy-random-core:5.0.0'
    testImplementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.14.3'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1'
    testImplementation 'org.apache.commons:commons-lang3:3.14.0'

    // LSD
    testImplementation 'io.github.lsd-consulting:lsd-logging-library:1.0.1'
    testImplementation 'io.github.lsd-consulting:lsd-distributed-http-connector:3.0.1'
    testImplementation 'io.github.lsd-consulting:lsd-junit5:6.0.1'
    testImplementation 'io.github.lsd-consulting:lsd-distributed-generator:7.1.1'
    testImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-api:6.0.1')
    testImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-service:6.0.1:wiremock-stubs'){
        exclude group: "*", module: "*"
    }
}

test {
    useJUnitPlatform()
    testLogging.events("skipped", "failed")
    systemProperty("lsd.core.report.outputDir", "$buildDir/reports/lsd")
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Integration HTTP test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
