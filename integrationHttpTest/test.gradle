dependencies {
    testImplementation project(":core")
    testImplementation project(":feign")
    testImplementation project(":spring-web")
    testImplementation project(":rabbitmq")

    // Spring
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-amqp'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    testImplementation 'io.micrometer:micrometer-tracing'
    testImplementation 'io.micrometer:micrometer-tracing-bridge-brave'
    testImplementation 'io.micrometer:micrometer-tracing-test'

    // Other
    testImplementation 'org.apache.commons:commons-lang3'
    testImplementation 'com.github.fridujo:rabbitmq-mock:1.1.1'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.wiremock:wiremock-standalone:3.12.1'
    testImplementation 'io.github.k-random:k-random-core:1.29.3'
    testImplementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // LSD
    testImplementation 'io.github.lsd-consulting:lsd-logging-library:1.0.18'
    testImplementation 'io.github.lsd-consulting:lsd-distributed-http-connector:4.0.42'
    testImplementation 'io.github.lsd-consulting:lsd-junit5:7.0.117'
    testImplementation 'io.github.lsd-consulting:lsd-distributed-generator:8.2.34'
    testImplementation 'io.github.lsd-consulting:lsd-distributed-generator-ui-api:7.2.0'
    testImplementation('io.github.lsd-consulting:lsd-distributed-generator-ui-service:7.2.0:wiremock-stubs'){
        exclude group: "*", module: "*"
    }
}

test {
    useJUnitPlatform()
    testLogging.events("skipped", "failed")
    systemProperty("lsd.core.report.outputDir", "${layout.buildDirectory.get().toString()}/reports/lsd")
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Integration HTTP test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}
